// OPTIMIZATION PARAMETERS
// TOP OPT NAME: vel[mean_inlet_vel]_n[nInlet]_P[max_inletP]_[S_or_NS]_Re[Re_value]_Vr[V_r]_[OPT METHOD]_a[alpha_max]_b[beta1_beta2_beta3_beta4]_t[stat_endTime_deltaT]_q[q_value]_[normalV]_[parabolicInlet]_df[diffisuveFilterCase_radius_weight]_p[projectionType_betaMax]_m[meshToPrint]_s[smooth_between_el]
rho[1]_mu[1]_U[100]_a[100e3]_L[1]_mma

// optimization scheme (0:MMA, 1:GOC, 2:GCMMA(not working))
0

// DEFINE OPTIMIZATION REGIONS (specify subdomains, if n_subdomains = 1 = n_opt_subdomains consider the whole domain as optimization one [works also in the subdomains are not really only 1])
// n subdomains
5
// initial gamma values for each subdomain (0.0:full, 1.0: empty)
1.0 1.0 1.0 1.0 1.0
//n opt subdomains
1
// optimization subdomains
1

// BRINKMAN PENALIZATION DEFINITION
// [αmin, h=half_domain_thickness] (h=0 stands for h=infinity) // domain thickness is only for 2D simulations. The alpha_min will be set to min(alpha_min, 5mu/2h) 
0   0
// αmax
100e3
// q  α(γ) ≡ αmin + (αmax − αmin)*[q(1 − γ)]/(q + γ)
1
// iterations to have real_amax = amax (0:immediately a_max) 
50

// CONSTRAINTS DEFINITION
//number of CONSTRAINTS (minimum of 1, the first must be the volume constraint, always enabled)
1
// constraints (id: description [parameters]) 
// --| 0: max volume fraction [prescribed_volume_fraction]
// --| 1: max subdomain volume fraction [domain_id, prescribed_volume_fraction]
// --| 2: max surface size fraction [bound_id, prescribed_surface_fraction]
// --| 3: inhance discretization of solution [discretization_tollerance]
// --| 4: impose a critical WSS constraints at the boundaries of the optimal geometry [crit_WSS, constraint_sign] // constraint sign means if the time averaged WSS, weighted over the nodal gamma gradient norm, must be "less than" or "greater than" the critical value
0
// parameters
0.36

// BASE FUNCTIONALS:
            | 0: alpha*||U||^2
            | 1: alpha*||U||^2 + 1/2*mu ||grad(u) + grad(u)^T||^2
// onlygrad
0

// ITERATIONS
// min iter
0
// maxIter
1000

// custom functional: 0 use funcID; 1 use following formulation
1
// FUNCTIONAL: (it is intended as the mean over time of the quantities)
// TIME INTEGRATION (0: rectangles centered on the final time of each interval [!RECOMMENDED FOR STATIONARY PROBLEMS]; 1: trapezoidal rule)
0
// INT_OMEGA{ beta1*alpha*||u||^2  +  beta2*1/2*mu*||grad(u)+grad(u)^T||^2  +  beta3*1/2*mu*||curl(u)||^2 }  +  beta4 * INT_GAMMA_in{p} +  // INT__OMEGA { beta5 * 1/2*rho * ||u||^2}
// beta1    beta2    beta3    beta4 
1 1 0 0

// GAMMA CHANGE TOLERANCE
0.00001

// USE GAMMA PROJECTOR ( 0: no; 1: p(gamma) = -2gamma^3 + 3*gamma^2; 2: p(gamma) = [tanh(beta*alpha) + tanh*beta*(gamma_node-alpha)] / [tanh(beta*alpha) + tanh(beta*(1-alpha))] )
2
// beta MAX
2
//beta min
0.1
// activate beta interpolation procedure (0: beta fixed to beta_min for all iterations, 1: beta interpolated untill beta_max depending on gamma change)
1
// change max to turn on beta interpolation
0.001
// change min to turn off beta interpolation
0.00001
// crit change to determine the q_beta for beta interpolation
0.0005
// crit beta to determine the q_beta for beta interpolation
1

// USE DIFFUSIVE FILTER FOR THE TOP. OPT. PARAMETER (0: no filter, 1: artihmetic mean, 2: geometric mean)
0
// DIFFUSION RADIUS PERCENTAGE (relative to the smaller side of the Top. Opt. box)
0.01
// DIFFUSION FILTER WEIGHT
0.5

// SMOOTHING BETWEEN ELEMENTS (0: no smooth, 1: smooth)
1

//--------------------------------- PRINT ---------------------------------------------------------------------
// BINARY PRINT (0: false, 1: true)
0

// deltaPrint: print optimization solution after each deltaPrint iterations
1
// write on finer mesh (0: pressure mesh, 1: velocity mesh)
1
// write initial condition in vtk (0: don't write, 1:write)
1

//-------------------------------- OPENMP PARAMETERS --------------------------------
// # threads (0: automatic criteria, -1: max for current machine)
0
